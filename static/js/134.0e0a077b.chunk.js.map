{"version":3,"file":"static/js/134.0e0a077b.chunk.js","mappings":"sSAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAKP,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAAgCC,GAAhC,wHAGoBP,EAASQ,IAH7B,uBAGwC,CACzCL,OAAQ,CAAEI,KAAAA,KAJT,uBAGKE,EAHL,EAGKA,KAHL,kBAMIA,GANJ,2HAYA,SAAeC,EAAtB,kC,aAAO,O,oBAAA,WAA8BC,GAA9B,kFACCC,EADD,iBACmBD,GADnB,kBAGoBX,EAASQ,IAAII,GAHjC,uBAGKH,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAWA,SAAeI,EAAtB,kC,aAAO,O,oBAAA,WAA4BF,GAA5B,kFACCC,EADD,iBACmBD,EADnB,8BAGoBX,EAASQ,IAAII,GAHjC,uBAGKH,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,kFACCC,EADD,iBACmBD,EADnB,8BAGoBX,EAASQ,IAAII,GAHjC,uBAGKH,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA2BC,GAA3B,kFACCJ,EADD,8BACgCI,GADhC,kBAGoBhB,EAASQ,IAAII,GAHjC,uBAGKH,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2H,iHCgCP,UAnFe,WACb,OAAwBQ,EAAAA,EAAAA,UAAS,IAAjC,eAAOR,EAAP,KAAaS,EAAb,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAad,IAAI,SAErC,GAA0BS,EAAAA,EAAAA,WAAS,kBAAMO,GAAe,EAArB,IAAnC,eAAOZ,EAAP,KAAca,EAAd,MAGAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,sGAEZP,GAAW,GAFC,UAGcL,EAAAA,EAAAA,IAAYS,GAH1B,gBAGJI,EAHI,EAGJA,QACRV,EAAQU,GACRR,GAAW,GALC,kDAOZS,QAAQC,IAAR,MAPY,yBASZV,GAAW,GATC,6EAAH,qDAYTI,GACFG,GAEH,GAAE,CAACH,IAEJ,IAAMO,GAAWC,EAAAA,EAAAA,MAYjB,OACE,iCACE,kBAAMC,UAAU,OAAOC,SAPN,SAAAC,GACnBA,EAAEC,iBACFb,EAAgB,CAAEX,MAAOA,GAC1B,EAIG,WACE,kBACEqB,UAAU,eACVI,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,eACZC,SAnBkB,SAAAN,GACxBV,EAASU,EAAEO,OAAOC,MACnB,EAkBOA,MAAO/B,KAET,mBAAQqB,UAAU,gBAAgBI,KAAK,SAAvC,wBAIF,+BACE,wBACGb,EACCL,EACE,aACEV,EAAKmC,OAAS,EAChBnC,EAAKoC,KAAI,gBAAGC,EAAH,EAAGA,MAAOnC,EAAV,EAAUA,GAAV,OACP,yBACE,SAAC,KAAD,CAAMoC,MAAO,CAAEC,KAAMjB,GAAYkB,GAAE,kBAAatC,GAAhD,SACGmC,KAFInC,EADF,KAQT,6FAKF,uEAMX,C","sources":["api/api.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '50eb30280678e2b5b5676ecd070356bb',\n    language: 'en-US',\n  },\n});\n\n// // запрос трендових фільмів дня для рендера на головну сторінку\nexport async function getTrendingMovie(page) {\n  const query = `/trending/movie/week`;\n  try {\n    const { data } = await instance.get(query, {\n      params: { page },\n    });\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n// // запрос деталей фільму\nexport async function getMovieDetail(id) {\n  const query = `/movie/${id}`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// // запрос касту фільма\nexport async function getMovieCast(id) {\n  const query = `/movie/${id}/credits`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// // запрос на відгуки для фільму\nexport async function getMovieReviews(id) {\n  const query = `/movie/${id}/reviews`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovie(queryString) {\n  const query = `/search/movie?query=${queryString}`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { useSearchParams, Link, useLocation } from 'react-router-dom';\nimport { searchMovie } from 'api/api';\n\nconst Movies = () => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  const [query, setQuery] = useState(() => searchQuery || '');\n\n  // Get запит\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const { results } = await searchMovie(searchQuery);\n        setData(results);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (searchQuery) {\n      getData();\n    }\n  }, [searchQuery]);\n\n  const location = useLocation();\n\n  const handleInputChange = e => {\n    setQuery(e.target.value);\n  };\n\n  // Викликається під час відправлення форми\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query: query });\n  };\n\n  return (\n    <>\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <input\n          className=\"search-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movie\"\n          onChange={handleInputChange}\n          value={query}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n      <>\n        <ul>\n          {searchQuery ? (\n            loading ? (\n              'Loading...'\n            ) : data.length > 0 ? (\n              data.map(({ title, id }) => (\n                <li key={id}>\n                  <Link state={{ from: location }} to={`/movies/${id}`}>\n                    {title}\n                  </Link>\n                </li>\n              ))\n            ) : (\n              <p>\n                No movies with this title were found. Try entering another title\n              </p>\n            )\n          ) : (\n            <p>Write the name of the movie to search</p>\n          )}\n        </ul>\n      </>\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["instance","axios","baseURL","params","api_key","language","getTrendingMovie","page","get","data","getMovieDetail","id","query","getMovieCast","getMovieReviews","searchMovie","queryString","useState","setData","loading","setLoading","useSearchParams","searchParams","setSearchParams","searchQuery","setQuery","useEffect","getData","results","console","log","location","useLocation","className","onSubmit","e","preventDefault","type","autoComplete","autoFocus","placeholder","onChange","target","value","length","map","title","state","from","to"],"sourceRoot":""}